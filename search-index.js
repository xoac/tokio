var searchIndex = {};
searchIndex["tokio"] = {"doc":"A runtime for writing reliable, asynchronous, and slim applications.","items":[[0,"clock","tokio","A configurable source of time.",null,null],[5,"now","tokio::clock","Returns an `Instant` corresponding to \"now\".",null,{"inputs":[],"output":{"name":"instant"}}],[0,"executor","tokio","Task execution utilities.",null,null],[8,"Executor","tokio::executor","A value that executes futures.",null,null],[10,"spawn","","Spawns a future object to run on this executor.",0,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",0,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",null,null],[3,"SpawnError","","Errors returned by `Executor::spawn`.",null,null],[3,"Spawn","","Return value from the `spawn` function.",null,null],[5,"spawn","","Spawns a future on the default executor.",null,{"inputs":[{"name":"f"}],"output":{"name":"spawn"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_future","","",1,null],[0,"fs","tokio","Asynchronous filesystem manipulation operations.",null,null],[0,"file","tokio::fs","Types for working with [`File`].",null,null],[3,"File","tokio::fs::file","A reference to an open file on the filesystem.",null,null],[3,"CreateFuture","","Future returned by `File::create` and resolves to a `File` instance.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",null,null],[3,"File","tokio::fs","A reference to an open file on the filesystem.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[0,"net","tokio","TCP/UDP bindings for `tokio`.",null,null],[3,"TcpStream","tokio::net","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"Incoming","","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"UdpFramed","","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[0,"reactor","tokio","Event loop that drives Tokio I/O resources.",null,null],[3,"Reactor","tokio::reactor","The core reactor, or event loop.",null,null],[3,"Handle","","A reference to a reactor.",null,null],[3,"Background","","Handle to the reactor running on a background thread.",null,null],[3,"Turn","","Return value from the `turn` method on `Reactor`.",null,null],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",null,null],[3,"PollEvented2","","Associates an I/O resource that implements the [`std::Read`] and / or [`std::Write`] traits with the reactor that drives it.",null,null],[0,"runtime","tokio","A batteries included runtime for applications using Tokio.",null,null],[3,"Builder","tokio::runtime","Builds Tokio Runtime with custom configuration values.",null,null],[3,"Shutdown","","A future that resolves when the Tokio `Runtime` is shut down.",null,null],[3,"TaskExecutor","","Executes futures on the runtime",null,null],[3,"Runtime","","Handle to the Tokio runtime.",null,null],[5,"run","","Start the Tokio runtime using the supplied future to bootstrap execution.",null,{"inputs":[{"name":"f"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new runtime builder initialized with default configuration values.",2,{"inputs":[],"output":{"name":"builder"}}],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",2,{"inputs":[{"name":"self"},{"name":"clock"}],"output":{"name":"self"}}],[11,"threadpool_builder","","Set builder to set up the thread pool instance.",2,{"inputs":[{"name":"self"},{"name":"threadpoolbuilder"}],"output":{"name":"self"}}],[11,"build","","Create the configured `Runtime`.",2,{"inputs":[{"name":"self"}],"output":{"generics":["runtime"],"name":"result"}}],[0,"current_thread","","A runtime implementation that runs everything on the current thread.",null,null],[3,"Builder","tokio::runtime::current_thread","Builds a Single-threaded runtime with custom configuration values.",null,null],[3,"Runtime","","Single-threaded runtime provides a way to start reactor and executor on the current thread.",null,null],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` runtime instance",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new runtime builder initialized with default configuration values.",3,{"inputs":[],"output":{"name":"builder"}}],[11,"clock","","Set the `Clock` instance that will be used by the runtime.",3,{"inputs":[{"name":"self"},{"name":"clock"}],"output":{"name":"self"}}],[11,"build","","Create the configured `Runtime`.",3,{"inputs":[{"name":"self"}],"output":{"generics":["runtime"],"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"spawn","","Spawn a future onto the `CurrentThread` runtime instance corresponding to this handle",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"new","","Returns a new runtime initialized with default configuration values.",4,{"inputs":[],"output":{"generics":["runtime"],"name":"result"}}],[11,"handle","","Get a new handle to spawn futures on the single-threaded Tokio runtime",4,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"spawn","","Spawn a future onto the single-threaded Tokio runtime.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Runs the provided future, blocking the current thread until the future completes.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",4,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"poll","tokio::runtime","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"spawn","","Spawn a future onto the Tokio runtime.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"execute","","",7,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"spawn","","",7,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new runtime instance with default configuration values.",8,{"inputs":[],"output":{"name":"result"}}],[11,"reactor","","Return a reference to the reactor handle for this runtime instance.",8,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"executor","","Return a handle to the runtime's executor.",8,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"spawn","","Spawn a future onto the Tokio runtime.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Run a future to completion on the Tokio runtime.",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"result"}}],[11,"shutdown_on_idle","","Signals the runtime to shutdown once it becomes idle.",8,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Signals the runtime to shutdown immediately.",8,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}],[0,"timer","tokio","Utilities for tracking time.",null,null],[3,"Deadline","tokio::timer","Allows a given `Future` to execute until the specified deadline.",null,null],[3,"DeadlineError","","Error returned by `Deadline` future.",null,null],[3,"Error","","Errors encountered by the timer implementation.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[3,"Delay","","A future that completes at a specified instant in time.",null,null],[0,"util","tokio","Utilities for working with Tokio.",null,null],[8,"FutureExt","tokio::util","An extension trait for `Future` that provides a variety of convenient combinator functions.",null,null],[11,"deadline","","Creates a new future which allows `self` until `deadline`.",9,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"deadline"}}],[0,"io","tokio","Asynchronous I/O.",null,null],[8,"AsyncRead","tokio::io","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",10,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",10,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",10,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",10,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",11,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",11,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",11,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",11,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[3,"Stdout","","A handle to the standard output stream of a process.",null,null],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"inputs":[{"name":"a"}],"output":{"name":"lines"}}],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readuntil"}}],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"shutdown"}}],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Error","","The error type for I/O operations of the [`Read`], [`Write`], [`Seek`], and associated traits.",null,null],[4,"ErrorKind","","A list specifying general categories of I/O error.",null,null],[13,"NotFound","","An entity was not found, often a file.",12,null],[13,"PermissionDenied","","The operation lacked the necessary privileges to complete.",12,null],[13,"ConnectionRefused","","The connection was refused by the remote server.",12,null],[13,"ConnectionReset","","The connection was reset by the remote server.",12,null],[13,"ConnectionAborted","","The connection was aborted (terminated) by the remote server.",12,null],[13,"NotConnected","","The network operation failed because it was not connected yet.",12,null],[13,"AddrInUse","","A socket address could not be bound because the address is already in use elsewhere.",12,null],[13,"AddrNotAvailable","","A nonexistent interface was requested or the requested address was not local.",12,null],[13,"BrokenPipe","","The operation failed because a pipe was closed.",12,null],[13,"AlreadyExists","","An entity already exists, often a file.",12,null],[13,"WouldBlock","","The operation needs to block to complete, but the blocking operation was requested to not occur.",12,null],[13,"InvalidInput","","A parameter was incorrect.",12,null],[13,"InvalidData","","Data not valid for the operation were encountered.",12,null],[13,"TimedOut","","The I/O operation's timeout expired, causing it to be canceled.",12,null],[13,"WriteZero","","An error returned when an operation could not be completed because a call to [`write`] returned [`Ok(0)`].",12,null],[13,"Interrupted","","This operation was interrupted.",12,null],[13,"Other","","Any I/O error not part of this list.",12,null],[13,"UnexpectedEof","","An error returned when an operation could not be completed because an \"end of file\" was reached prematurely.",12,null],[6,"Result","","A specialized `Result` type for I/O operations.",null,null],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",13,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",13,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",13,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",13,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",13,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",13,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",13,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",14,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",14,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",14,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",14,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"prelude","tokio","A \"prelude\" for users of the `tokio` crate.",null,null],[8,"AsyncRead","tokio::prelude","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",10,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",10,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",10,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",10,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",10,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",11,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",11,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",11,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",11,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning how many bytes were read.",13,null],[11,"initializer","","Determines if this `Read`er can work with buffers of uninitialized memory.",13,{"inputs":[{"name":"self"}],"output":{"name":"initializer"}}],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",13,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, appending them to `buf`.",13,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",13,null],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Read`.",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an [`Iterator`] over its bytes.",13,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an [`Iterator`] over [`char`]s.",13,{"inputs":[{"name":"self"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",13,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[8,"Write","","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",14,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered contents reach their destination.",14,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",14,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error encountered.",14,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"generics":["error"],"name":"result"}}],[11,"by_ref","","Creates a \"by reference\" adaptor for this instance of `Write`.",14,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"Future","","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",15,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",15,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",15,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",15,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",15,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",15,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",15,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",15,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",15,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",15,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",15,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",15,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",15,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",15,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[0,"future","","Futures",null,null],[8,"Future","tokio::prelude::future","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",15,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",15,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",15,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",15,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",15,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",15,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",15,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",15,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",15,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",15,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",15,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",15,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",15,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",15,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",15,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",15,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",15,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",16,null],[16,"Item","","The item that the future may resolve with.",16,null],[16,"Error","","The error that the future may resolve with.",16,null],[10,"into_future","","Consumes this object and produces a future.",16,null],[8,"FutureFrom","","Asynchronous conversion from a type `T`.",null,null],[16,"Future","","The future for the conversion.",17,null],[16,"Error","","Possible errors during conversion.",17,null],[10,"future_from","","Consume the given value, beginning the conversion.",17,null],[8,"Executor","","A trait for types which can spawn fresh futures.",null,null],[10,"execute","","Spawns a future to run on this `Executor`, typically in the \"background\".",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[3,"ExecuteError","","Errors returned from the `Spawn::spawn` function.",null,null],[4,"ExecuteErrorKind","","Kinds of errors that can be returned from the `Execute::spawn` function.",null,null],[13,"Shutdown","","This executor has shut down and will no longer accept new futures to spawn.",19,null],[13,"NoCapacity","","This executor has no more capacity to run more futures. Other futures need to finish before this executor can accept another.",19,null],[3,"Select2","","Future for the `select2` combinator, waiting for one of two differently-typed futures to complete.",null,null],[3,"Done","","A future representing a value that is immediately ready.",null,null],[3,"FlattenStream","","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream.",null,null],[3,"MapErr","","Future for the `map_err` combinator, changing the error type of a future.",null,null],[5,"poll_fn","","Creates a new future wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[5,"collect","","Creates a future which represents a collection of the results of the futures given.",null,{"inputs":[{"name":"i"}],"output":{"name":"joinall"}}],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[5,"loop_fn","","Creates a new future implementing a tail-recursive loop.",null,{"inputs":[{"name":"s"},{"name":"f"}],"output":{"name":"loopfn"}}],[3,"SelectOk","","Future for the `select_ok` combinator, waiting for one of any of a list of futures to successfully complete. Unlike `select_all`, this future ignores all but the last error, if there are any.",null,null],[5,"select_ok","","Creates a new future which will select the first successful future over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectok"}}],[3,"FromErr","","Future for the `from_err` combinator, changing the error type of a future.",null,null],[3,"SelectNext","","Future yielded as the second result in a `Select` future.",null,null],[5,"lazy","","Creates a new future which will eventually be the same as the one created by the closure provided.",null,{"inputs":[{"name":"f"}],"output":{"name":"lazy"}}],[3,"Join","","Future for the `join` combinator, waiting for two futures to complete.",null,null],[3,"Map","","Future for the `map` combinator, changing the type of a future.",null,null],[3,"CatchUnwind","","Future for the `catch_unwind` combinator.",null,null],[3,"LoopFn","","A future implementing a tail-recursive loop.",null,null],[5,"failed","","Creates a \"leaf future\" from an immediate value of a failed computation.",null,{"inputs":[{"name":"e"}],"output":{"name":"futureresult"}}],[3,"SharedError","","A wrapped error of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"Inspect","","Do something with the item of a future, passing it on.",null,null],[3,"Join5","","Future for the `join5` combinator, waiting for five futures to complete.",null,null],[3,"PollFn","","A future which adapts a function returning `Poll`.",null,null],[3,"Select","","Future for the `select` combinator, waiting for one of two futures to complete.",null,null],[3,"SharedItem","","A wrapped item of the original future that is cloneable and implements Deref for ease of use.",null,null],[3,"Fuse","","A future which \"fuses\" a future once it's been resolved.",null,null],[3,"OrElse","","Future for the `or_else` combinator, chaining a computation onto the end of a future which fails with an error.",null,null],[5,"done","","Creates a new \"leaf future\" which will resolve with the given result.",null,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[5,"select_all","","Creates a new future which will select over a list of futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"selectall"}}],[3,"JoinAll","","A future which takes a list of futures and resolves with a vector of the completed values.",null,null],[3,"Join3","","Future for the `join3` combinator, waiting for three futures to complete.",null,null],[3,"Then","","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome.",null,null],[3,"Flatten","","Future for the `flatten` combinator, flattening a future-of-a-future to get just the result of the final future.",null,null],[3,"SelectAll","","Future for the `select_all` combinator, waiting for one of any of a list of futures to complete.",null,null],[3,"IntoStream","","Future that forwards one element from the underlying future (whether it is success of error) and emits EOF after that.",null,null],[3,"Empty","","A future which is never resolved.",null,null],[4,"Loop","","The status of a `loop_fn` loop.",null,null],[13,"Break","","Indicates that the loop has completed with output `T`.",20,null],[13,"Continue","","Indicates that the loop function should be called again with input state `S`.",20,null],[5,"empty","","Creates a future which never resolves, representing a computation that never finishes.",null,{"inputs":[],"output":{"name":"empty"}}],[4,"Either","","Combines two different futures yielding the same item and error types into a single type.",null,null],[13,"A","","First branch of the type",21,null],[13,"B","","Second branch of the type",21,null],[3,"AndThen","","Future for the `and_then` combinator, chaining a computation onto the end of another future which completes successfully.",null,null],[3,"Join4","","Future for the `join4` combinator, waiting for four futures to complete.",null,null],[3,"Shared","","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future.",null,null],[3,"Lazy","","A future which defers creation of the actual future until a callback is scheduled.",null,null],[8,"Stream","tokio::prelude","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",22,null],[16,"Error","","The type of error this stream may generate.",22,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",22,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",22,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",22,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",22,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",22,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",22,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",22,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",22,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",22,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",22,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",22,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",22,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",22,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",22,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",22,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",22,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",22,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",22,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",22,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[0,"stream","","Asynchronous streams",null,null],[0,"futures_unordered","tokio::prelude::stream","An unbounded set of futures.",null,null],[3,"FuturesUnordered","tokio::prelude::stream::futures_unordered","An unbounded set of futures.",null,null],[3,"IterMut","","Mutable iterator over all futures in the unordered set.",null,null],[8,"Stream","tokio::prelude::stream","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",22,null],[16,"Error","","The type of error this stream may generate.",22,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",22,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",22,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",22,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",22,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",22,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",22,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",22,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",22,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",22,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",22,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",22,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",22,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",22,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",22,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",22,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",22,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",22,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",22,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",22,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",22,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",22,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",22,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[5,"futures_unordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresunordered"}}],[3,"StreamFuture","","A combinator used to temporarily convert a stream into a future.",null,null],[3,"IterStream","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"IterResult","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[3,"SendError","","Error type for sending, used when the receiving end of the channel is dropped",null,null],[3,"Take","","A stream combinator which returns a maximum number of elements.",null,null],[3,"MapErr","","A stream combinator which will change the error type of a stream from one type to another.",null,null],[3,"ReuniteError","","Error indicating a `SplitSink<S>` and `SplitStream<S>` were not two halves of a `Stream + Split`, and thus could not be `reunite`d.",null,null],[12,"0","","",23,null],[12,"1","","",23,null],[5,"poll_fn","","Creates a new stream wrapping around a function returning `Poll`.",null,{"inputs":[{"name":"f"}],"output":{"name":"pollfn"}}],[3,"Filter","","A stream combinator used to filter the results of a stream and only yield some values.",null,null],[3,"SkipWhile","","A stream combinator which skips elements of a stream while a predicate holds.",null,null],[3,"Receiver","","The receiving end of a channel which implements the `Stream` trait.",null,null],[3,"Zip","","An adapter for merging the output of two streams.",null,null],[3,"SplitSink","","A `Sink` part of the split pair",null,null],[3,"Concat2","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"FromErr","","A stream combinator to change the error type of a stream.",null,null],[5,"channel","","Creates an in-memory channel implementation of the `Stream` trait.",null,null],[3,"FutureSender","","Future returned by `Sender::send`.",null,null],[3,"ForEach","","A stream combinator which executes a unit closure over each item on a stream.",null,null],[3,"Sender","","The transmission end of a channel which is used to send values.",null,null],[5,"unfold","","Creates a `Stream` from a seed and a closure returning a `Future`.",null,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"unfold"}}],[3,"Map","","A stream combinator which will change the type of a stream from one type to another.",null,null],[3,"CatchUnwind","","Stream for the `catch_unwind` combinator.",null,null],[3,"BufferUnordered","","An adaptor for a stream of futures to execute the futures concurrently, if possible, delivering results as they become available.",null,null],[5,"iter_ok","","Converts an `Iterator` into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"i"}],"output":{"name":"iterok"}}],[3,"FuturesOrdered","","An unbounded queue of futures.",null,null],[3,"Skip","","A stream combinator which skips a number of elements before continuing.",null,null],[3,"Inspect","","Do something with the items of a stream, passing it on.",null,null],[3,"Repeat","","Stream that produces the same element repeatedly.",null,null],[5,"iter","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iter"}}],[3,"PollFn","","A stream which adapts a function returning `Poll`.",null,null],[3,"Fold","","A future used to collect all the results of a stream into one generic type.",null,null],[3,"Select","","An adapter for merging the output of two streams.",null,null],[3,"Fuse","","A stream which \"fuse\"s a stream once it's terminated.",null,null],[3,"Merge","","An adapter for merging the output of two streams.",null,null],[3,"TakeWhile","","A stream combinator which takes elements from a stream while a predicate holds.",null,null],[5,"repeat","","Create a stream which produces the same item repeatedly.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"OrElse","","A stream combinator which chains a computation onto errors produced by a stream.",null,null],[3,"Forward","","Future for the `Stream::forward` combinator, which sends a stream of values to a sink and then waits until the sink has fully flushed those values.",null,null],[3,"Then","","A stream combinator which chains a computation onto each item produced by a stream.",null,null],[5,"iter_result","","Converts an `Iterator` over `Result`s into a `Stream` which is always ready to yield the next value.",null,{"inputs":[{"name":"j"}],"output":{"name":"iterresult"}}],[3,"Flatten","","A combinator used to flatten a stream-of-streams into one long stream of elements.",null,null],[3,"Chain","","An adapter for chaining the output of two streams.",null,null],[3,"SplitStream","","A `Stream` part of the split pair",null,null],[3,"Concat","","A stream combinator to concatenate the results of a stream into the first yielded item.",null,null],[3,"IterOk","","A stream which is just a shim over an underlying instance of `Iterator`.",null,null],[4,"MergedItem","","An item returned from a merge stream, which represents an item from one or both of the underlying streams.",null,null],[13,"First","","An item from the first stream",24,null],[13,"Second","","An item from the second stream",24,null],[13,"Both","","Items from both streams",24,null],[3,"Empty","","A stream which contains no elements.",null,null],[3,"Unfold","","A stream which creates futures, polls them and return their result",null,null],[3,"Collect","","A future which collects all of the values of a stream into a vector.",null,null],[3,"InspectErr","","Do something with the error of a stream, passing it on.",null,null],[3,"Buffered","","An adaptor for a stream of futures to execute the futures concurrently, if possible.",null,null],[5,"empty","","Creates a stream which contains no elements.",null,{"inputs":[],"output":{"name":"empty"}}],[3,"Peekable","","A `Stream` that implements a `peek` method.",null,null],[5,"once","","Creates a stream of single element",null,{"inputs":[{"name":"result"}],"output":{"name":"once"}}],[3,"AndThen","","A stream combinator which chains a computation onto values produced by a stream.",null,null],[3,"Wait","","A stream combinator which converts an asynchronous stream to a blocking iterator.",null,null],[3,"FuturesUnordered","","An unbounded set of futures.",null,null],[5,"futures_ordered","","Converts a list of futures into a `Stream` of results from the futures.",null,{"inputs":[{"name":"i"}],"output":{"name":"futuresordered"}}],[3,"FilterMap","","A combinator used to filter the results of a stream and simultaneously map them to a different type.",null,null],[3,"Once","","A stream which emits single element and then EOF.",null,null],[3,"Chunks","","An adaptor that chunks up elements in a vector.",null,null],[8,"Sink","tokio::prelude","A `Sink` is a value into which other values can be sent, asynchronously.",null,null],[16,"SinkItem","","The type of value that the sink accepts.",25,null],[16,"SinkError","","The type of value produced by the sink when an error occurs.",25,null],[10,"start_send","","Begin the process of sending a value to the sink.",25,null],[10,"poll_complete","","Flush all output from this sink, if necessary.",25,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","A method to indicate that no more values will ever be pushed into this sink.",25,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates a new object which will produce a synchronous sink.",25,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"with","","Composes a function in front of the sink.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"with"}}],[11,"with_flat_map","","Composes a function in front of the sink.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"withflatmap"}}],[11,"sink_map_err","","Transforms the error returned by the sink.",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"sinkmaperr"}}],[11,"sink_from_err","","Map this sink's error to any error implementing `From` for this sink's `Error`, returning a new sink.",25,{"inputs":[{"name":"self"}],"output":{"name":"sinkfromerr"}}],[11,"buffer","","Adds a fixed-size buffer to the current sink.",25,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffer"}}],[11,"fanout","","Fanout items to multiple sinks.",25,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"fanout"}}],[11,"flush","","A future that completes when the sink has finished processing all pending requests.",25,{"inputs":[{"name":"self"}],"output":{"name":"flush"}}],[11,"send","","A future that completes after the given item has been fully processed into the sink, including flushing.",25,null],[11,"send_all","","A future that completes after the given stream has been fully processed into the sink, including flushing.",25,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"sendall"}}],[8,"IntoFuture","","Class of types which can be converted into a future.",null,null],[16,"Future","","The future that this type can be converted into.",16,null],[16,"Item","","The item that the future may resolve with.",16,null],[16,"Error","","The error that the future may resolve with.",16,null],[10,"into_future","","Consumes this object and produces a future.",16,null],[4,"Async","","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",26,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",26,null],[4,"AsyncSink","","The result of an asynchronous attempt to send a value to a sink.",null,null],[13,"Ready","","The `start_send` attempt succeeded, so the sending process has started; you must use `Sink::poll_complete` to drive the send to completion.",27,null],[13,"NotReady","","The `start_send` attempt failed due to the sink being full. The value being sent is returned, and the current `Task` will be automatically notified again once the sink has room.",27,null],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[0,"task","","Tasks used to drive a future computation",null,null],[3,"Spawn","tokio::prelude::task","Representation of a spawned future/stream.",null,null],[5,"current","","Returns a handle to the current task to call `notify` at a later date.",null,{"inputs":[],"output":{"name":"task"}}],[5,"spawn","","Spawns a future or stream, returning it and the new task responsible for running it to completion.",null,{"inputs":[{"name":"t"}],"output":{"name":"spawn"}}],[8,"Executor","","A trait representing requests to poll futures.",null,null],[10,"execute","","Requests that `Run` is executed soon on the given executor.",28,null],[5,"with_unpark_event","","For the duration of the given callback, add an \"unpark event\" to be triggered when the task handle is used to unpark the task.",null,{"inputs":[{"name":"unparkevent"},{"name":"f"}],"output":{"name":"r"}}],[3,"UnparkEvent","","A set insertion to trigger upon `unpark`.",null,null],[3,"LocalKey","","A key for task-local data stored in a future's task.",null,null],[3,"Task","","A handle to a \"task\", which represents a single lightweight \"thread\" of execution driving a future to completion.",null,null],[3,"Run","","Units of work submitted to an `Executor`, currently only created internally.",null,null],[8,"Unpark","","A trait which represents a sink of notifications that a future is ready to make progress.",null,null],[10,"unpark","","Indicates that an associated future and/or task are ready to make progress.",29,null],[3,"AtomicTask","","A synchronization primitive for task notification.",null,null],[8,"EventSet","","A concurrent set which allows for the insertion of `usize` values.",null,null],[10,"insert","","Insert the given ID into the set",30,null],[5,"init","","Initialize the `futures` task system.",null,null],[3,"TaskRc","","A reference to a piece of data that's accessible only within a specific `Task`.",null,null],[8,"FutureExt","tokio::prelude","An extension trait for `Future` that provides a variety of convenient combinator functions.",null,null],[11,"deadline","tokio::util","Creates a new future which allows `self` until `deadline`.",9,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"fmt","tokio::io","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"cmp","","",12,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"ordering"}}],[11,"from","","",31,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"from","","",31,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"from","","",31,{"inputs":[{"name":"errorkind"}],"output":{"name":"error"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",12,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"description","","",31,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",31,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from_iter","tokio::prelude::stream","",32,{"inputs":[{"name":"t"}],"output":{"name":"futuresunordered"}}],[11,"from_iter","","",33,{"inputs":[{"name":"t"}],"output":{"name":"futuresordered"}}],[11,"next","","",34,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","tokio::prelude::stream::futures_unordered","",35,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",35,null],[11,"clone","tokio::prelude","",27,{"inputs":[{"name":"self"}],"output":{"name":"asyncsink"}}],[11,"clone","tokio::prelude::future","",19,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"clone","tokio::prelude::task","",36,{"inputs":[{"name":"self"}],"output":{"name":"taskrc"}}],[11,"clone","tokio::prelude::future","",37,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"shareditem"}}],[11,"clone","tokio::prelude","",26,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"clone","tokio::prelude::future","",39,{"inputs":[{"name":"self"}],"output":{"name":"sharederror"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"clone","tokio::prelude::task","",41,{"inputs":[{"name":"self"}],"output":{"name":"task"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"unparkevent"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"atomictask"}}],[11,"deref","tokio::prelude::future","",39,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"deref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start_send","tokio::prelude::stream","",44,null],[11,"poll_complete","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",45,null],[11,"poll_complete","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",46,null],[11,"poll_complete","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",47,null],[11,"poll_complete","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",48,null],[11,"poll_complete","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",49,null],[11,"poll_complete","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",50,null],[11,"poll_complete","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",51,null],[11,"poll_complete","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",52,null],[11,"poll_complete","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",53,null],[11,"poll_complete","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",54,null],[11,"poll_complete","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",55,null],[11,"poll_complete","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",55,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",56,null],[11,"poll_complete","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",57,null],[11,"poll_complete","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",58,null],[11,"poll_complete","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",59,null],[11,"poll_complete","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",60,null],[11,"poll_complete","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",61,null],[11,"poll_complete","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",62,null],[11,"poll_complete","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",63,null],[11,"poll_complete","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",64,null],[11,"poll_complete","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","tokio::prelude::future","",66,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",67,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",68,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",69,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",40,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",70,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",71,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",72,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",73,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",37,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",74,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",75,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",76,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",21,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",77,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",78,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",79,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",80,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",81,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",82,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",83,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",84,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",85,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",86,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",87,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",88,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",89,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",90,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",91,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",92,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",93,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",94,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",95,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",96,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",97,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"executeerrorkind"}],"output":{"name":"bool"}}],[11,"eq","tokio::prelude","",26,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"asyncsink"}],"output":{"name":"bool"}}],[11,"poll","tokio::prelude::stream","",98,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",62,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",99,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",100,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",101,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",57,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",56,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",53,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",63,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",102,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",103,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",104,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",105,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",58,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",51,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",52,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",48,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",106,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",107,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",108,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",109,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",64,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",60,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",54,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",47,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",110,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",59,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",61,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",111,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",112,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",33,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",45,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",44,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",113,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",32,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::future","",114,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::prelude::stream","",49,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"from","tokio::prelude::future","",40,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[11,"from","tokio::prelude","",26,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"description","tokio::prelude::stream","",65,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","tokio::prelude::future","",39,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"cause","","",39,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","tokio::prelude::stream","",23,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"drop","","",32,null],[11,"drop","tokio::prelude::future","",37,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",94,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",104,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",103,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",107,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",115,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",86,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",116,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",87,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",61,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",63,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",68,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",85,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",67,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",100,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",62,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",92,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",66,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",72,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",109,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",89,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",97,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",69,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",59,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",60,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",76,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::task","",117,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",93,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",70,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream::futures_unordered","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",99,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",64,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",118,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",80,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",111,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",113,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",105,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",101,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",114,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",108,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",74,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",77,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",71,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",82,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",65,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",96,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",98,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",112,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",81,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",119,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",78,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",88,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",79,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",110,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",73,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",84,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",83,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",95,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",75,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",106,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::future","",91,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::prelude::stream","",102,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","tokio::executor","",120,{"inputs":[{"name":"self"}],"output":{"name":"defaultexecutor"}}],[11,"spawn","","",120,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",120,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",121,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"shutdown","tokio::io","",122,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","",122,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"read_buf","","",123,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write","","",122,null],[11,"flush","","",122,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",123,null],[11,"poll","","",124,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",125,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",126,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",127,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",128,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",129,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",130,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"fmt","","",122,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",126,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",127,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",123,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",128,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",129,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",130,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",131,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","","",131,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"from","tokio::fs","",132,{"inputs":[{"name":"openoptions"}],"output":{"name":"openoptions"}}],[11,"clone","","",132,{"inputs":[{"name":"self"}],"output":{"name":"openoptions"}}],[11,"write","tokio::io","",133,null],[11,"flush","","",133,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","tokio::fs","",134,null],[11,"flush","","",134,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"write","tokio::io","",135,null],[11,"flush","","",135,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",136,null],[11,"read","tokio::fs","",134,null],[11,"poll","tokio::fs::file","",137,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",138,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","","",138,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",137,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::io","",133,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",135,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::fs","",132,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::io","",136,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tokio::fs","",134,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"drop","","",134,null],[11,"prepare_uninitialized_buffer","","",134,null],[11,"prepare_uninitialized_buffer","tokio::io","",136,null],[11,"shutdown","","",135,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"shutdown","","",133,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"shutdown","tokio::fs","",134,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"unpark","tokio::reactor","",139,null],[11,"park","","",139,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"park_timeout","","",139,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",140,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"unpark","","",140,null],[11,"write","","",141,null],[11,"flush","","",141,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",141,null],[11,"fmt","","",139,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",140,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",142,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",141,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",143,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",144,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",140,{"inputs":[],"output":{"name":"handle"}}],[11,"drop","","",141,null],[11,"drop","","",142,null],[11,"shutdown","","",141,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","tokio::timer","",145,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",146,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",145,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",149,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",148,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",147,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",146,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",147,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"description","","",148,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"poll","","",149,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","tokio::net","",150,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"shutdown","","",151,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write_buf","","",151,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"prepare_uninitialized_buffer","","",151,null],[11,"read_buf","","",151,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"write","","",151,null],[11,"flush","","",151,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"read","","",151,null],[11,"as_raw_fd","","",151,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"as_raw_fd","","",152,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"poll","","",153,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"fmt","","",152,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",150,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",151,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",153,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"start_send","","",154,null],[11,"poll_complete","","",154,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",154,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",155,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll","","",156,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"as_raw_fd","","",157,{"inputs":[{"name":"self"}],"output":{"name":"i32"}}],[11,"poll","","",154,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","","",157,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",155,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",156,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"current","tokio::executor","Returns a handle to the default executor for the current context.",120,{"inputs":[],"output":{"name":"defaultexecutor"}}],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",121,{"inputs":[],"output":{"name":"spawnerror"}}],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",121,{"inputs":[],"output":{"name":"spawnerror"}}],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",121,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"open","tokio::fs","Attempts to open a file in read-only mode.",134,{"inputs":[{"name":"p"}],"output":{"name":"openfuture"}}],[11,"create","","Opens a file in write-only mode.",134,{"inputs":[{"name":"p"}],"output":{"name":"createfuture"}}],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",134,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",134,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",134,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",134,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_metadata","","Queries metadata about the underlying file.",134,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",134,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",134,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",134,{"inputs":[{"name":"self"}],"output":{"name":"file"}}],[11,"new","","Creates a blank new set of options ready for configuration.",132,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","See the underlying [`read`] call for details.",132,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","See the underlying [`write`] call for details.",132,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","See the underlying [`append`] call for details.",132,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","See the underlying [`truncate`] call for details.",132,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","See the underlying [`create`] call for details.",132,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create_new","","See the underlying [`create_new`] call for details.",132,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",132,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"openfuture"}}],[11,"connect","tokio::net","Create a new TCP stream connected to the specified address.",151,{"inputs":[{"name":"socketaddr"}],"output":{"name":"connectfuture"}}],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",151,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"generics":["tcpstream","error"],"name":"result"}}],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",151,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"connectfuture"}}],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",151,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",151,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",151,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",151,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",151,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",151,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"generics":["error"],"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",151,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",151,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",151,{"inputs":[{"name":"self"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",151,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",151,{"inputs":[{"name":"self"}],"output":{"generics":["usize","error"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",151,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["error"],"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",151,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",151,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",151,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",151,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",151,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",151,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["error"],"name":"result"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",152,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener","error"],"name":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",152,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",152,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",152,{"inputs":[{"name":"tcplistener"},{"name":"handle"}],"output":{"generics":["tcplistener","error"],"name":"result"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",152,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",152,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",152,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",152,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",157,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket","error"],"name":"result"}}],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",157,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"generics":["udpsocket","error"],"name":"result"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",157,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr","error"],"name":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",157,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",157,null],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",157,null],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",157,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",157,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",157,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",157,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",157,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",157,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",157,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",157,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",157,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",157,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",157,{"inputs":[{"name":"self"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",157,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"generics":["error"],"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",157,{"inputs":[{"name":"self"}],"output":{"generics":["u32","error"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",157,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",157,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"generics":["error"],"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",157,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",157,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"generics":["error"],"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",157,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",154,{"inputs":[{"name":"udpsocket"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",154,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",154,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",154,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"new","tokio::reactor","Creates a new event loop, returning any error that happened during the creation.",139,{"inputs":[],"output":{"generics":["reactor","error"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",139,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",139,{"inputs":[{"name":"self"}],"output":{"generics":["setfallbackerror"],"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",139,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","error"],"name":"result"}}],[11,"is_idle","","Returns true if the reactor is currently idle.",139,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"background","","Run this reactor on a background thread.",139,{"inputs":[{"name":"self"}],"output":{"generics":["background","error"],"name":"result"}}],[11,"current","","Returns a handle to the current reactor.",140,{"inputs":[],"output":{"name":"handle"}}],[11,"handle","","Returns a reference to the reactor handle.",142,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",142,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the reactor immediately",142,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"forget","","Run the reactor on its thread until the process terminates.",142,null],[11,"new","","Create a new `Registration`.",143,{"inputs":[],"output":{"name":"registration"}}],[11,"register","","Register the I/O resource with the default reactor.",143,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",143,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["error"],"name":"result"}}],[11,"register_with","","Register the I/O resource with the specified reactor.",143,{"inputs":[{"name":"self"},{"name":"t"},{"name":"handle"}],"output":{"generics":["bool","error"],"name":"result"}}],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",143,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"take_read_ready","","Consume any pending read readiness event.",143,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",143,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"take_write_ready","","Consume any pending write readiness event.",143,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",141,{"inputs":[{"name":"e"}],"output":{"name":"pollevented"}}],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",141,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"generics":["pollevented","error"],"name":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",141,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",141,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"into_inner","","Consumes self, returning the inner I/O object",141,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",141,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",141,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",141,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",141,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"result"}}],[11,"new","tokio::timer","Create a new `Deadline` that completes when `future` completes or when `deadline` is reached.",145,{"inputs":[{"name":"t"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"get_ref","","Gets a reference to the underlying future in this deadline.",145,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying future in this deadline.",145,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this deadline, returning the underlying future.",145,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"inner","","Create a new `DeadlineError` representing the inner future completing with `Err`.",147,{"inputs":[{"name":"t"}],"output":{"name":"deadlineerror"}}],[11,"is_inner","","Returns `true` if the error was caused by the inner future completing with `Err`.",147,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes `self`, returning the inner future error.",147,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"elapsed","","Create a new `DeadlineError` representing the inner future not completing before the deadline is reached.",147,{"inputs":[],"output":{"name":"deadlineerror"}}],[11,"is_elapsed","","Returns `true` if the error was caused by the inner future not completing before the deadline is reached.",147,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"timer","","Creates a new `DeadlineError` representing an error encountered by the timer implementation",147,{"inputs":[{"name":"error"}],"output":{"name":"deadlineerror"}}],[11,"is_timer","","Returns `true` if the error was caused by the timer.",147,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",147,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"shutdown","","Create an error representing a shutdown timer.",148,{"inputs":[],"output":{"name":"error"}}],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",148,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"at_capacity","","Create an error representing a timer at capacity.",148,{"inputs":[],"output":{"name":"error"}}],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",148,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",149,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",146,{"inputs":[{"name":"instant"}],"output":{"name":"delay"}}],[11,"deadline","","Returns the instant at which the future will complete.",146,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",146,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Reset the `Delay` instance to a new deadline.",146,null],[11,"deadline","tokio::util","Creates a new future which allows `self` until `deadline`.",9,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"into_inner","tokio::io","Returns the underlying I/O object.",131,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"new","","Creates a new I/O error from a known kind of error as well as an arbitrary error payload.",31,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",31,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",31,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",31,{"inputs":[{"name":"self"}],"output":{"generics":["i32"],"name":"option"}}],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",31,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error (if any).",31,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",31,{"inputs":[{"name":"self"}],"output":{"generics":["box"],"name":"option"}}],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",31,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"new","tokio::prelude::future","Create a new `ExecuteError`",119,{"inputs":[{"name":"executeerrorkind"},{"name":"f"}],"output":{"name":"executeerror"}}],[11,"kind","","Returns the associated reason for the error",119,{"inputs":[{"name":"self"}],"output":{"name":"executeerrorkind"}}],[11,"into_future","","Consumes self and returns the original future that was spawned.",119,{"inputs":[{"name":"self"}],"output":{"name":"f"}}],[11,"is_done","","Returns whether the underlying future has finished or not.",92,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split","","Splits out the homogeneous type from an either of tuples.",21,null],[11,"peek","","If any clone of this `Shared` has completed execution, returns its result immediately without blocking. Otherwise, returns None without triggering the work represented by this `Shared`.",37,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"new","tokio::prelude::stream","Constructs a new, empty `FuturesUnordered`",32,{"inputs":[],"output":{"name":"futuresunordered"}}],[11,"len","","Returns the number of futures contained in the set.",32,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the set contains no futures",32,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the set.",32,null],[11,"iter_mut","","Returns an iterator that allows modifying each future in the set.",32,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",90,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",57,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",46,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",61,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",54,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",54,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",54,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",55,{"inputs":[{"name":"self"},{"name":"splitstream"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",62,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"send","","Sends a new value along this channel to the receiver.",118,{"inputs":[{"name":"self"},{"name":"result"}],"output":{"name":"futuresender"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",52,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",60,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"new","","Constructs a new, empty `FuturesOrdered`",33,{"inputs":[],"output":{"name":"futuresordered"}}],[11,"len","","Returns the number of futures contained in the queue.",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the queue contains no futures",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","Push a future into the queue.",33,null],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",44,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",44,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",44,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",53,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"is_done","","Returns whether the underlying stream has finished or not.",47,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",47,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",47,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",47,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",45,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",45,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",45,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"sink_ref","","Get a shared reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sink_mut","","Get a mutable reference to the inner sink. If this combinator has already been polled to completion, None will be returned.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_ref","","Get a shared reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"stream_mut","","Get a mutable reference to the inner stream. If this combinator has already been polled to completion, None will be returned.",81,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",59,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"reunite","","Attempts to put the two \"halves\" of a split `Stream + Sink` back together. Succeeds only if the `SplitStream<S>` and `SplitSink<S>` are a matching pair originating from the same call to `Stream::split`.",106,{"inputs":[{"name":"self"},{"name":"splitsink"}],"output":{"generics":["reuniteerror"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",50,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",50,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",50,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",48,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",48,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",48,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"peek","","Peek retrieves a reference to the next item in the stream.",49,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",58,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",34,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",34,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",34,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",64,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",64,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",64,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_ref","","Acquires a reference to the underlying stream that this combinator is pulling from.",63,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"get_mut","","Acquires a mutable reference to the underlying stream that this combinator is pulling from.",63,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"into_inner","","Consumes this combinator, returning the underlying stream.",63,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"map","tokio::prelude","Change the success value of this `Async` with the closure provided",26,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",26,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"map","","Change the NotReady value of this `AsyncSink` with the closure provided",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"asyncsink"}}],[11,"is_ready","","Returns whether this is `AsyncSink::Ready`",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `AsyncSink::NotReady`",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"poll_future","tokio::prelude::task","Polls the internal future, scheduling notifications to be sent to the `unpark` argument.",116,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_future","","Waits for the internal future to complete, blocking this thread's execution until it does.",116,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"execute","","A specialized function to request running a future to completion on the specified executor.",116,null],[11,"poll_stream","","Like `poll_future`, except polls the underlying stream.",116,{"inputs":[{"name":"self"},{"generics":["unpark"],"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_stream","","Like `wait_future`, except only waits for the next element to arrive on the underlying stream.",116,{"inputs":[{"name":"self"}],"output":{"generics":["result"],"name":"option"}}],[11,"start_send","","Invokes the underlying `start_send` method with this task in place.",116,null],[11,"poll_flush","","Invokes the underlying `poll_complete` method with this task in place.",116,{"inputs":[{"name":"self"},{"name":"arc"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait_send","","Blocks the current thread until it's able to send `value` on this sink.",116,null],[11,"wait_flush","","Blocks the current thread until it's able to flush this sink.",116,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"wait_close","","Blocks the current thread until it's able to close this sink.",116,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"get_ref","","Get a shared reference to the object the Spawn is wrapping.",116,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the object the Spawn is wrapping.",116,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consume the Spawn, returning its inner object",116,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll_future_notify","","Polls the internal future, scheduling notifications to be sent to the `notify` argument.",116,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll_stream_notify","","Like `poll_future_notify`, except polls the underlying stream.",116,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send_notify","","Invokes the underlying `start_send` method with this task in place.",116,null],[11,"poll_flush_notify","","Invokes the underlying `poll_complete` method with this task in place.",116,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"close_notify","","Invokes the underlying `close` method with this task in place.",116,{"inputs":[{"name":"self"},{"name":"n"},{"name":"usize"}],"output":{"generics":["async"],"name":"result"}}],[11,"new","","Construct an unpark event that will insert `id` into `set` when triggered.",42,{"inputs":[{"generics":["eventset"],"name":"arc"},{"name":"usize"}],"output":{"name":"unparkevent"}}],[11,"with","","Access this task-local key, running the provided closure with a reference to the value.",115,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"notify","","Indicate that the task should attempt to poll its future in a timely fashion.",41,null],[11,"is_current","","Returns `true` when called from within the context of the task.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"will_notify_current","","This function is intended as a performance optimization for structures which store a `Task` internally.",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"run","","Actually run the task (invoking `poll` on its future) on the current thread.",117,null],[11,"new","","Create an `AtomicTask` initialized with the given `Task`",43,{"inputs":[],"output":{"name":"atomictask"}}],[11,"register","","Registers the current task to be notified on calls to `notify`.",43,null],[11,"register_task","","Registers the provided task to be notified on calls to `notify`.",43,null],[11,"notify","","Notifies the task that last called `register`.",43,null],[11,"new","","Inserts a new piece of task-local data into this task, returning a reference to it.",36,{"inputs":[{"name":"a"}],"output":{"name":"taskrc"}}],[11,"with","","Operate with a reference to the underlying data.",36,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}]],"paths":[[8,"Executor"],[3,"Spawn"],[3,"Builder"],[3,"Builder"],[3,"Runtime"],[3,"Handle"],[3,"Shutdown"],[3,"TaskExecutor"],[3,"Runtime"],[8,"FutureExt"],[8,"AsyncRead"],[8,"AsyncWrite"],[4,"ErrorKind"],[8,"Read"],[8,"Write"],[8,"Future"],[8,"IntoFuture"],[8,"FutureFrom"],[8,"Executor"],[4,"ExecuteErrorKind"],[4,"Loop"],[4,"Either"],[8,"Stream"],[3,"ReuniteError"],[4,"MergedItem"],[8,"Sink"],[4,"Async"],[4,"AsyncSink"],[8,"Executor"],[8,"Unpark"],[8,"EventSet"],[3,"Error"],[3,"FuturesUnordered"],[3,"FuturesOrdered"],[3,"Wait"],[3,"IterMut"],[3,"TaskRc"],[3,"Shared"],[3,"SharedItem"],[3,"SharedError"],[3,"Done"],[3,"Task"],[3,"UnparkEvent"],[3,"AtomicTask"],[3,"Skip"],[3,"TakeWhile"],[3,"MapErr"],[3,"Fuse"],[3,"Buffered"],[3,"Peekable"],[3,"InspectErr"],[3,"Then"],[3,"Map"],[3,"Inspect"],[3,"SkipWhile"],[3,"SplitSink"],[3,"OrElse"],[3,"Take"],[3,"AndThen"],[3,"Flatten"],[3,"BufferUnordered"],[3,"Filter"],[3,"FromErr"],[3,"Chunks"],[3,"FilterMap"],[3,"SendError"],[3,"SelectOk"],[3,"AndThen"],[3,"Join4"],[3,"Fold"],[3,"Concat"],[3,"Join"],[3,"PollFn"],[3,"Flatten"],[3,"CatchUnwind"],[3,"FutureSender"],[3,"Join3"],[3,"Select2"],[3,"Collect"],[3,"Lazy"],[3,"Then"],[3,"Forward"],[3,"Concat2"],[3,"SelectAll"],[3,"Map"],[3,"Inspect"],[3,"ForEach"],[3,"MapErr"],[3,"SelectNext"],[3,"JoinAll"],[3,"StreamFuture"],[3,"LoopFn"],[3,"Fuse"],[3,"Select"],[3,"Join5"],[3,"FromErr"],[3,"Empty"],[3,"OrElse"],[3,"IterStream"],[3,"CatchUnwind"],[3,"IterResult"],[3,"IterOk"],[3,"Chain"],[3,"IntoStream"],[3,"Merge"],[3,"Select"],[3,"SplitStream"],[3,"Zip"],[3,"Repeat"],[3,"Receiver"],[3,"Unfold"],[3,"Empty"],[3,"Once"],[3,"PollFn"],[3,"FlattenStream"],[3,"LocalKey"],[3,"Spawn"],[3,"Run"],[3,"Sender"],[3,"ExecuteError"],[3,"DefaultExecutor"],[3,"SpawnError"],[3,"WriteHalf"],[3,"ReadHalf"],[3,"Copy"],[3,"Flush"],[3,"WriteAll"],[3,"ReadUntil"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"Shutdown"],[3,"Lines"],[3,"OpenOptions"],[3,"Stdout"],[3,"File"],[3,"Stderr"],[3,"Stdin"],[3,"OpenFuture"],[3,"CreateFuture"],[3,"Reactor"],[3,"Handle"],[3,"PollEvented2"],[3,"Background"],[3,"Registration"],[3,"Turn"],[3,"Deadline"],[3,"Delay"],[3,"DeadlineError"],[3,"Error"],[3,"Interval"],[3,"ConnectFuture"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpFramed"],[3,"RecvDgram"],[3,"SendDgram"],[3,"UdpSocket"]]};
searchIndex["tokio_codec"] = {"doc":"Utilities for encoding and decoding frames.","items":[[8,"Decoder","tokio_codec","Decoding of frames via buffers.",null,null],[16,"Item","","The type of decoded frames.",0,null],[16,"Error","","The type of unrecoverable frame decoding errors.",0,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",0,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[11,"decode_eof","","A default method available to be called when there are no more bytes available to be read from the underlying I/O.",0,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option"],"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[8,"Encoder","","Trait of helper objects to write out messages as bytes, for use with `FramedWrite`.",null,null],[16,"Item","","The type of items consumed by the `Encoder`",1,null],[16,"Error","","The type of encoding errors.",1,null],[10,"encode","","Encodes a frame into the buffer provided.",1,null],[3,"Framed","","A unified `Stream` and `Sink` interface to an underlying I/O object, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"FramedParts","","`FramedParts` contains an export of the data of a Framed transport. It can be used to construct a new `Framed` with a different codec. It contains all current buffers and the inner transport.",null,null],[12,"io","","The inner transport used to read bytes to and write bytes to",2,null],[12,"codec","","The codec",2,null],[12,"read_buf","","The buffer with read but unprocessed data.",2,null],[12,"write_buf","","A buffer with unprocessed data which are not written yet.",2,null],[3,"FramedRead","","A `Stream` of messages decoded from an `AsyncRead`.",null,null],[3,"FramedWrite","","A `Sink` of frames encoded to an `AsyncWrite`.",null,null],[3,"BytesCodec","","A simple `Codec` implementation that just ships bytes around.",null,null],[3,"LinesCodec","","A simple `Codec` implementation that splits up data into lines.",null,null],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"bytescodec"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"cmp","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"self"},{"name":"bytescodec"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"new","","Creates a new `BytesCodec` for shipping around raw bytes.",3,{"inputs":[],"output":{"name":"bytescodec"}}],[11,"decode","","",3,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"self"},{"name":"bytes"},{"name":"bytesmut"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"linescodec"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"linescodec"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"new","","Returns a `LinesCodec` for splitting up data into lines.",4,{"inputs":[],"output":{"name":"linescodec"}}],[11,"decode","","",4,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"decode_eof","","",4,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"generics":["option","error"],"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"self"},{"name":"string"},{"name":"bytesmut"}],"output":{"generics":["error"],"name":"result"}}],[11,"start_send","","",5,null],[11,"poll_complete","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",6,null],[11,"poll_complete","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"start_send","","",7,null],[11,"poll_complete","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"close","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"new","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",7,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"framed"}}],[11,"from_parts","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",7,{"inputs":[{"name":"framedparts"}],"output":{"name":"framed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Frame`.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Frame`.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `Frame`, returning its underlying I/O stream.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_parts","","Consumes the `Frame`, returning its underlying I/O stream, the buffer with unprocessed data, and the codec.",7,{"inputs":[{"name":"self"}],"output":{"name":"framedparts"}}],[11,"new","","Create a new, default, `FramedParts`",2,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"framedparts"}}],[11,"new","","Creates a new `FramedRead` with the given `decoder`.",5,{"inputs":[{"name":"t"},{"name":"d"}],"output":{"name":"framedread"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedRead`.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedRead`.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedRead`, returning its underlying I/O stream.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"decoder","","Returns a reference to the underlying decoder.",5,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"decoder_mut","","Returns a mutable reference to the underlying decoder.",5,{"inputs":[{"name":"self"}],"output":{"name":"d"}}],[11,"new","","Creates a new `FramedWrite` with the given `encoder`.",6,{"inputs":[{"name":"t"},{"name":"e"}],"output":{"name":"framedwrite"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `FramedWrite`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `FramedWrite`.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes the `FramedWrite`, returning its underlying I/O stream.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"encoder","","Returns a reference to the underlying decoder.",6,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"encoder_mut","","Returns a mutable reference to the underlying decoder.",6,{"inputs":[{"name":"self"}],"output":{"name":"e"}}]],"paths":[[8,"Decoder"],[8,"Encoder"],[3,"FramedParts"],[3,"BytesCodec"],[3,"LinesCodec"],[3,"FramedRead"],[3,"FramedWrite"],[3,"Framed"]]};
searchIndex["tokio_current_thread"] = {"doc":"A single-threaded executor which executes tasks on the same thread from which they are spawned.","items":[[3,"CurrentThread","tokio_current_thread","Executes tasks on the current thread",null,null],[3,"TaskExecutor","","Executes futures on the current thread.",null,null],[3,"Turn","","Returned by the `turn` function.",null,null],[3,"Entered","","A `CurrentThread` instance bound to a supplied execution context.",null,null],[3,"RunError","","Error returned by the `run` function.",null,null],[3,"RunTimeoutError","","Error returned by the `run_timeout` function.",null,null],[3,"TurnError","","Error returned by the `turn` function.",null,null],[3,"BlockError","","Error returned by the `block_on` function.",null,null],[3,"Handle","","Handle to spawn a future on the corresponding `CurrentThread` instance",null,null],[5,"block_on_all","","Run the executor bootstrapping the execution with the provided future.",null,{"inputs":[{"name":"f"}],"output":{"name":"result"}}],[5,"spawn","","Executes a future on the current thread.",null,{"inputs":[{"name":"f"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"taskexecutor"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"has_polled","","`true` if any futures were polled at all and `false` otherwise.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new instance of `CurrentThread`.",6,{"inputs":[],"output":{"name":"self"}}],[11,"new_with_park","","Create a new instance of `CurrentThread` backed by the given park handle.",6,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"is_idle","","Returns `true` if the executor is currently idle.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"spawn","","Spawn the future on the executor.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Synchronously waits for the provided `future` to complete.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["blockerror"],"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",6,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",6,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["runtimeouterror"],"name":"result"}}],[11,"turn","","Perform a single iteration of the event loop.",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","turnerror"],"name":"result"}}],[11,"enter","","Bind `CurrentThread` instance with an execution context.",6,{"inputs":[{"name":"self"},{"name":"enter"}],"output":{"name":"entered"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",6,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",6,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"handle","","Get a new handle to spawn futures on the executor",6,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"spawn","","",6,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawn the future on the executor.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"block_on","","Synchronously waits for the provided `future` to complete.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["blockerror"],"name":"result"}}],[11,"run","","Run the executor to completion, blocking the thread until all spawned futures have completed.",7,{"inputs":[{"name":"self"}],"output":{"generics":["runerror"],"name":"result"}}],[11,"run_timeout","","Run the executor to completion, blocking the thread until all spawned futures have completed or `duration` time has elapsed.",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"generics":["runtimeouterror"],"name":"result"}}],[11,"turn","","Perform a single iteration of the event loop.",7,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn","turnerror"],"name":"result"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",7,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",7,{"inputs":[{"name":"self"}],"output":{"name":"p"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawn a future onto the `CurrentThread` instance corresponding to this handle",8,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"current","","Returns an executor that executes futures on the current thread.",0,{"inputs":[],"output":{"name":"taskexecutor"}}],[11,"spawn_local","","Spawn a future onto the current `CurrentThread` instance.",0,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",0,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"execute","","",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"is_timeout","","Returns `true` if the error was caused by the operation timing out.",3,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from","","",3,{"inputs":[{"name":"entererror"}],"output":{"name":"self"}}],[11,"into_inner","","Returns the error yielded by the future being blocked on",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"from","","",5,{"inputs":[{"name":"entererror"}],"output":{"name":"self"}}]],"paths":[[3,"TaskExecutor"],[3,"Turn"],[3,"RunError"],[3,"RunTimeoutError"],[3,"TurnError"],[3,"BlockError"],[3,"CurrentThread"],[3,"Entered"],[3,"Handle"]]};
searchIndex["tokio_executor"] = {"doc":"Task execution related traits and utilities.","items":[[3,"Enter","tokio_executor","Represents an executor context.",null,null],[3,"EnterError","","An error returned by `enter` if an execution scope has already been entered.",null,null],[3,"DefaultExecutor","","Executes futures on the default executor for the current execution context.",null,null],[3,"SpawnError","","Errors returned by `Executor::spawn`.",null,null],[5,"enter","","Marks the current thread as being within the dynamic extent of an executor.",null,{"inputs":[],"output":{"generics":["enter","entererror"],"name":"result"}}],[5,"spawn","","Submits a future for execution on the default executor -- usually a threadpool.",null,{"inputs":[{"name":"t"}],"output":null}],[5,"with_default","","Set the default executor for the duration of the closure",null,{"inputs":[{"name":"t"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"on_exit","","Register a callback to be invoked if and when the thread ceased to act as an executor.",1,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"make_permanent","","Treat the remainder of execution on this thread as part of an executor; used mostly for thread pool worker threads.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"defaultexecutor"}}],[11,"current","","Returns a handle to the default executor for the current context.",2,{"inputs":[],"output":{"name":"defaultexecutor"}}],[11,"spawn","","",2,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[0,"park","","Abstraction over blocking and unblocking the current thread.",null,null],[3,"ParkThread","tokio_executor::park","Blocks the current thread using a condition variable.",null,null],[3,"ParkError","","Error returned by [`ParkThread`]",null,null],[3,"UnparkThread","","Unblocks a thread that was blocked by `ParkThread`.",null,null],[8,"Park","","Block the current thread.",null,null],[16,"Unpark","","Unpark handle type for the `Park` implementation.",3,null],[16,"Error","","Error returned by `park`",3,null],[10,"unpark","","Get a new `Unpark` handle associated with this `Park` instance.",3,null],[10,"park","","Block the current thread unless or until the token is available.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"park_timeout","","Park the current thread for at most `duration`.",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[8,"Unpark","","Unblock a thread blocked by the associated [`Park`] instance.",null,null],[10,"unpark","","Unblock a thread that is blocked by the associated `Park` handle.",4,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"unparkthread"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ParkThread` handle for the current thread.",5,{"inputs":[],"output":{"name":"parkthread"}}],[11,"unpark","","",5,null],[11,"park","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",5,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"unpark","","",7,{"inputs":[{"name":"self"}],"output":null}],[8,"Executor","tokio_executor","A value that executes futures.",null,null],[10,"spawn","","Spawns a future object to run on this executor.",8,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","Provides a best effort hint to whether or not `spawn` will succeed.",8,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shutdown","","Return a new `SpawnError` reflecting a shutdown executor failure.",9,{"inputs":[],"output":{"name":"self"}}],[11,"at_capacity","","Return a new `SpawnError` reflecting an executor at capacity failure.",9,{"inputs":[],"output":{"name":"self"}}],[11,"is_shutdown","","Returns `true` if the error reflects a shutdown executor failure.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_at_capacity","","Returns `true` if the error reflects an executor at capacity failure.",9,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[3,"EnterError"],[3,"Enter"],[3,"DefaultExecutor"],[8,"Park"],[8,"Unpark"],[3,"ParkThread"],[3,"ParkError"],[3,"UnparkThread"],[8,"Executor"],[3,"SpawnError"]]};
searchIndex["tokio_fs"] = {"doc":"Asynchronous filesystem manipulation operations (and stdin, stdout, stderr).","items":[[3,"OpenOptions","tokio_fs","Options and flags which can be used to configure how a file is opened.",null,null],[3,"Stdin","","A handle to the standard input stream of a process.",null,null],[3,"Stdout","","A handle to the standard output stream of a process.",null,null],[3,"Stderr","","A handle to the standard error stream of a process.",null,null],[5,"stdin","","Constructs a new handle to the standard input of the current process.",null,{"inputs":[],"output":{"name":"stdin"}}],[5,"stdout","","Constructs a new handle to the standard output of the current process.",null,{"inputs":[],"output":{"name":"stdout"}}],[5,"stderr","","Constructs a new handle to the standard error of the current process.",null,{"inputs":[],"output":{"name":"stderr"}}],[0,"file","","Types for working with [`File`].",null,null],[3,"CreateFuture","tokio_fs::file","Future returned by `File::create` and resolves to a `File` instance.",null,null],[3,"OpenFuture","","Future returned by `File::open` and resolves to a `File` instance.",null,null],[3,"OpenOptions","","Options and flags which can be used to configure how a file is opened.",null,null],[3,"File","","A reference to an open file on the filesystem.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"clone","tokio_fs","",2,{"inputs":[{"name":"self"}],"output":{"name":"openoptions"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a blank new set of options ready for configuration.",2,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","See the underlying [`read`] call for details.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"write","","See the underlying [`write`] call for details.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"append","","See the underlying [`append`] call for details.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"truncate","","See the underlying [`truncate`] call for details.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create","","See the underlying [`create`] call for details.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"create_new","","See the underlying [`create_new`] call for details.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"openoptions"}}],[11,"open","","Opens a file at `path` with the options specified by `self`.",2,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"openfuture"}}],[11,"from","","",2,{"inputs":[{"name":"stdopenoptions"}],"output":{"name":"openoptions"}}],[11,"fmt","tokio_fs::file","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"open","","Attempts to open a file in read-only mode.",3,{"inputs":[{"name":"p"}],"output":{"name":"openfuture"}}],[11,"create","","Opens a file in write-only mode.",3,{"inputs":[{"name":"p"}],"output":{"name":"createfuture"}}],[11,"poll_seek","","Seek to an offset, in bytes, in a stream.",3,{"inputs":[{"name":"self"},{"name":"seekfrom"}],"output":{"generics":["u64","error"],"name":"poll"}}],[11,"poll_sync_all","","Attempts to sync all OS-internal metadata to disk.",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_sync_data","","This function is similar to `poll_sync_all`, except that it may not synchronize file metadata to the filesystem.",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_set_len","","Truncates or extends the underlying file, updating the size of this file to become size.",3,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_metadata","","Queries metadata about the underlying file.",3,{"inputs":[{"name":"self"}],"output":{"generics":["metadata","error"],"name":"poll"}}],[11,"poll_try_clone","","Create a new `File` instance that shares the same underlying file handle as the existing `File` instance. Reads, writes, and seeks will affect both File instances simultaneously.",3,{"inputs":[{"name":"self"}],"output":{"generics":["file","error"],"name":"poll"}}],[11,"poll_set_permissions","","Changes the permissions on the underlying file.",3,{"inputs":[{"name":"self"},{"name":"permissions"}],"output":{"generics":["error"],"name":"poll"}}],[11,"into_std","","Destructures the `tokio_fs::File` into a [`std::fs::File`][std].",3,{"inputs":[{"name":"self"}],"output":{"name":"stdfile"}}],[11,"read","","",3,null],[11,"prepare_uninitialized_buffer","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","tokio_fs","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",4,null],[11,"prepare_uninitialized_buffer","","",4,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}]],"paths":[[3,"CreateFuture"],[3,"OpenFuture"],[3,"OpenOptions"],[3,"File"],[3,"Stdin"],[3,"Stdout"],[3,"Stderr"]]};
searchIndex["tokio_io"] = {"doc":"Core I/O traits and combinators when working with Tokio.","items":[[0,"io","tokio_io","I/O conveniences when working with primitives in `tokio-core`",null,null],[3,"AllowStdIo","tokio_io::io","A simple wrapper type which allows types that only implement `std::io::Read` or `std::io::Write` to be used in contexts which expect an `AsyncRead` or `AsyncWrite`.",null,null],[3,"Copy","","A future which will copy all data from a reader into a writer.",null,null],[3,"Flush","","A future used to fully flush an I/O object.",null,null],[3,"Lines","","Combinator created by the top-level `lines` method which is a stream over the lines of text on an I/O object.",null,null],[3,"Read","","A future which can be used to easily read available number of bytes to fill a buffer.",null,null],[3,"ReadExact","","A future which can be used to easily read exactly enough bytes to fill a buffer.",null,null],[3,"ReadToEnd","","A future which can be used to easily read the entire contents of a stream into a vector.",null,null],[3,"ReadUntil","","A future which can be used to easily read the contents of a stream into a vector until the delimiter is reached.",null,null],[3,"Shutdown","","A future used to fully shutdown an I/O object.",null,null],[3,"ReadHalf","","The readable half of an object returned from `AsyncRead::split`.",null,null],[3,"WriteHalf","","The writable half of an object returned from `AsyncRead::split`.",null,null],[3,"Window","","A owned window around an underlying buffer.",null,null],[3,"WriteAll","","A future used to write the entire contents of some data to a stream.",null,null],[5,"copy","","Creates a future which represents copying all the bytes from one object to another.",null,{"inputs":[{"name":"r"},{"name":"w"}],"output":{"name":"copy"}}],[5,"flush","","Creates a future which will entirely flush an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"flush"}}],[5,"lines","","Creates a new stream from the I/O object given representing the lines of input that are found on `A`.",null,{"inputs":[{"name":"a"}],"output":{"name":"lines"}}],[5,"read","","Tries to read some bytes directly into the given `buf` in asynchronous manner, returning a future type.",null,{"inputs":[{"name":"r"},{"name":"t"}],"output":{"name":"read"}}],[5,"read_exact","","Creates a future which will read exactly enough bytes to fill `buf`, returning an error if EOF is hit sooner.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"readexact"}}],[5,"read_to_end","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided.",null,{"inputs":[{"name":"a"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readtoend"}}],[5,"read_until","","Creates a future which will read all the bytes associated with the I/O object `A` into the buffer provided until the delimiter `byte` is reached. This method is the async equivalent to [`BufRead::read_until`].",null,{"inputs":[{"name":"a"},{"name":"u8"},{"generics":["u8"],"name":"vec"}],"output":{"name":"readuntil"}}],[5,"shutdown","","Creates a future which will entirely shutdown an I/O object and then yield the object itself.",null,{"inputs":[{"name":"a"}],"output":{"name":"shutdown"}}],[5,"write_all","","Creates a future that will write the entire contents of the buffer `buf` to the stream `a` provided.",null,{"inputs":[{"name":"a"},{"name":"t"}],"output":{"name":"writeall"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"allowstdio"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"cmp","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"self"},{"name":"allowstdio"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"new","","Creates a new `AllowStdIo` from an existing IO object.",8,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_ref","","Returns a reference to the contained IO object.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained IO object.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes self and returns the contained IO object.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"write","","",8,null],[11,"flush","","",8,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"write_all","","",8,null],[11,"write_fmt","","",8,{"inputs":[{"name":"self"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"shutdown","","",8,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"read","","",8,null],[11,"read_to_end","","",8,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_to_string","","",8,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["usize"],"name":"result"}}],[11,"read_exact","","",8,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into_inner","","Returns the underlying I/O object.",9,{"inputs":[{"name":"self"}],"output":{"name":"a"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"read","","",10,null],[11,"read_buf","","",10,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"write","","",11,null],[11,"flush","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",11,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new window around the buffer `t` defaulting to the entire slice.",12,{"inputs":[{"name":"t"}],"output":{"name":"window"}}],[11,"get_ref","","Gets a shared reference to the underlying buffer inside of this `Window`.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying buffer inside of this `Window`.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this `Window`, returning the underlying buffer.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"start","","Returns the starting index of this window into the underlying buffer `T`.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"end","","Returns the end index of this window into the underlying buffer `T`.",12,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"set_start","","Changes the starting index of this window to the index specified.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"set_end","","Changes the end index of this window to the index specified.",12,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"window"}}],[11,"as_ref","","",12,null],[11,"as_mut","","",12,null],[6,"IoFuture","tokio_io","A convenience typedef around a `Future` whose error component is `io::Error`",null,null],[6,"IoStream","","A convenience typedef around a `Stream` whose error component is `io::Error`",null,null],[8,"AsyncRead","","Read bytes asynchronously.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",13,null],[8,"AsyncWrite","","Writes bytes asynchronously.",null,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[10,"shutdown","","Initiates or attempts to shut down this writer, returning success when the I/O connection has completely shut down.",14,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[14,"try_nb","","A convenience macro for working with `io::Result<T>` from the `Read` and `Write` traits.",null,null],[11,"prepare_uninitialized_buffer","","Prepares an uninitialized buffer to be safe to pass to `read`. Returns `true` if the supplied buffer was zeroed out.",13,null],[11,"poll_read","","Attempt to read from the `AsyncRead` into `buf`.",13,null],[11,"read_buf","","Pull some bytes from this source into the specified `Buf`, returning how many bytes were read.",13,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `Io` object, using `Decode` and `Encode` to read and write the raw data.",13,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"framed"}}],[11,"split","","Helper method for splitting this read/write object into two halves.",13,null],[11,"poll_write","","Attempt to write bytes from `buf` into the object.",14,null],[11,"poll_flush","","Attempt to flush the object, ensuring that any buffered data reach their destination.",14,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","Write a `Buf` into this value, returning how many bytes were written.",14,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}]],"paths":[[3,"Copy"],[3,"Flush"],[3,"Read"],[3,"ReadExact"],[3,"ReadToEnd"],[3,"ReadUntil"],[3,"Shutdown"],[3,"WriteAll"],[3,"AllowStdIo"],[3,"Lines"],[3,"ReadHalf"],[3,"WriteHalf"],[3,"Window"],[8,"AsyncRead"],[8,"AsyncWrite"]]};
searchIndex["tokio_reactor"] = {"doc":"Event loop that drives Tokio I/O resources.","items":[[3,"Background","tokio_reactor","Handle to the reactor running on a background thread.",null,null],[3,"Registration","","Associates an I/O resource with the reactor instance that drives it.",null,null],[3,"PollEvented","","Associates an I/O resource that implements the [`std::Read`] and / or [`std::Write`] traits with the reactor that drives it.",null,null],[3,"Reactor","","The core reactor, or event loop.",null,null],[3,"Handle","","A reference to a reactor.",null,null],[3,"Turn","","Return value from the `turn` method on `Reactor`.",null,null],[3,"SetFallbackError","","Error returned from `Handle::set_fallback`.",null,null],[5,"with_default","","Set the default reactor for the duration of the closure",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"handle","","Returns a reference to the reactor handle.",0,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"shutdown_on_idle","","Shutdown the reactor on idle.",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the reactor immediately",0,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"forget","","Run the reactor on its thread until the process terminates.",0,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"new","","Creates a new `PollEvented` associated with the default reactor.",1,{"inputs":[{"name":"e"}],"output":{"name":"pollevented"}}],[11,"new_with_handle","","Creates a new `PollEvented` associated with the specified reactor.",1,{"inputs":[{"name":"e"},{"name":"handle"}],"output":{"name":"result"}}],[11,"get_ref","","Returns a shared reference to the underlying I/O object this readiness stream is wrapping.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O object this readiness stream is wrapping.",1,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"into_inner","","Consumes self, returning the inner I/O object",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read_ready","","Check the I/O resource's read readiness state.",1,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"clear_read_ready","","Clears the I/O resource's read readiness state and registers the current task to be notified once a read readiness event is received.",1,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"name":"result"}}],[11,"poll_write_ready","","Check the I/O resource's write readiness state.",1,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"clear_write_ready","","Resets the I/O resource's write readiness state and registers the current task to be notified once a write readiness event is received.",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"read","","",1,null],[11,"write","","",1,null],[11,"flush","","",1,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Registration`.",2,{"inputs":[],"output":{"name":"registration"}}],[11,"register","","Register the I/O resource with the default reactor.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["bool"],"name":"result"}}],[11,"deregister","","Deregister the I/O resource from the reactor it is associated with.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"register_with","","Register the I/O resource with the specified reactor.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"handle"}],"output":{"generics":["bool"],"name":"result"}}],[11,"poll_read_ready","","Poll for events on the I/O resource's read readiness stream.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"take_read_ready","","Consume any pending read readiness event.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"poll_write_ready","","Poll for events on the I/O resource's write readiness stream.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"take_write_ready","","Consume any pending write readiness event.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"setfallbackerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new event loop, returning any error that happened during the creation.",6,{"inputs":[],"output":{"generics":["reactor"],"name":"result"}}],[11,"handle","","Returns a handle to this event loop which can be sent across threads and can be used as a proxy to the event loop itself.",6,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"set_fallback","","Configures the fallback handle to be returned from `Handle::default`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["setfallbackerror"],"name":"result"}}],[11,"turn","","Performs one iteration of the event loop, blocking on waiting for events for at most `max_wait` (forever if `None`).",6,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn"],"name":"result"}}],[11,"is_idle","","Returns true if the reactor is currently idle.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"background","","Run this reactor on a background thread.",6,{"inputs":[{"name":"self"}],"output":{"generics":["background"],"name":"result"}}],[11,"unpark","","",6,null],[11,"park","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",6,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"current","","Returns a handle to the current reactor.",3,{"inputs":[],"output":{"name":"handle"}}],[11,"unpark","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"default","","Returns a \"default\" handle, i.e., a handle that lazily binds to a reactor.",3,{"inputs":[],"output":{"name":"handle"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Background"],[3,"PollEvented"],[3,"Registration"],[3,"Handle"],[3,"Turn"],[3,"SetFallbackError"],[3,"Reactor"]]};
searchIndex["tokio_tcp"] = {"doc":"TCP bindings for `tokio`.","items":[[3,"Incoming","tokio_tcp","Stream returned by the `TcpListener::incoming` function representing the stream of sockets received from a listener.",null,null],[3,"TcpListener","","An I/O object representing a TCP socket listening for incoming connections.",null,null],[3,"TcpStream","","An I/O object representing a TCP stream connected to a remote endpoint.",null,null],[3,"ConnectFuture","","Future returned by `TcpStream::connect` which will resolve to a `TcpStream` when the stream is connected.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Create a new TCP listener associated with this event loop.",1,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `TcpStream` if successful.",1,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"from_std","","Create a new TCP listener from the standard library's TCP listener.",1,{"inputs":[{"name":"tcplistener"},{"name":"handle"}],"output":{"generics":["tcplistener"],"name":"result"}}],[11,"local_addr","","Returns the local address that this listener is bound to.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",1,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"connect","","Create a new TCP stream connected to the specified address.",2,{"inputs":[{"name":"socketaddr"}],"output":{"name":"connectfuture"}}],[11,"from_std","","Create a new `TcpStream` from a `net::TcpStream`.",2,{"inputs":[{"name":"tcpstream"},{"name":"handle"}],"output":{"generics":["tcpstream"],"name":"result"}}],[11,"connect_std","","Creates a new `TcpStream` from the pending socket inside the given `std::net::TcpStream`, connecting it to the address specified.",2,{"inputs":[{"name":"tcpstream"},{"name":"socketaddr"},{"name":"handle"}],"output":{"name":"connectfuture"}}],[11,"poll_read_ready","","Check the TCP stream's read readiness state.",2,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"poll_write_ready","","Check the TCP stream's write readiness state.",2,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"local_addr","","Returns the local address that this stream is bound to.",2,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the remote address that this stream is connected to.",2,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"poll_peek","","Receives data on the socket from the remote address to which it is connected, without removing that data from the queue. On success, returns the number of bytes peeked.",2,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",2,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"recv_buffer_size","","Gets the value of the `SO_RCVBUF` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_recv_buffer_size","","Sets the value of the `SO_RCVBUF` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"send_buffer_size","","Gets the value of the `SO_SNDBUF` option on this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["usize"],"name":"result"}}],[11,"set_send_buffer_size","","Sets the value of the `SO_SNDBUF` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"keepalive","","Returns whether keepalive messages are enabled on this socket, and if so the duration of time between them.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_keepalive","","Sets whether keepalive messages are enabled to be sent on this socket.",2,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",2,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",2,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"linger","","Reads the linger duration for this socket by getting the `SO_LINGER` option.",2,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"set_linger","","Sets the linger duration of this socket by setting the `SO_LINGER` option.",2,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"result"}}],[11,"read","","",2,null],[11,"write","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_uninitialized_buffer","","",2,null],[11,"read_buf","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"shutdown","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",2,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["tcpstream","error"],"name":"poll"}}]],"paths":[[3,"Incoming"],[3,"TcpListener"],[3,"TcpStream"],[3,"ConnectFuture"]]};
searchIndex["tokio_threadpool"] = {"doc":"A work-stealing based thread pool for executing futures.","items":[[3,"BlockingError","tokio_threadpool","Error raised by `blocking`.",null,null],[3,"Builder","","Builds a thread pool with custom configuration values.",null,null],[3,"Sender","","Submit futures to the associated thread pool for execution.",null,null],[3,"Shutdown","","Future that resolves when the thread pool is shutdown.",null,null],[3,"ThreadPool","","Work-stealing based thread pool for executing futures.",null,null],[3,"Worker","","Thread worker",null,null],[5,"blocking","","Enter a blocking section of code.",null,{"inputs":[{"name":"f"}],"output":{"generics":["blockingerror"],"name":"poll"}}],[0,"park","","Thread parking utilities.",null,null],[3,"DefaultPark","tokio_threadpool::park","Parks the thread.",null,null],[3,"DefaultUnpark","","Unparks threads that were parked by `DefaultPark`.",null,null],[3,"ParkError","","Error returned by [`ParkThread`]",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new `DefaultPark` instance.",0,{"inputs":[],"output":{"name":"defaultpark"}}],[11,"unpark","","",0,null],[11,"park","","",0,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"unpark","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","tokio_threadpool","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"new","","Returns a new thread pool builder initialized with default configuration values.",4,{"inputs":[],"output":{"name":"builder"}}],[11,"pool_size","","Set the maximum number of worker threads for the thread pool instance.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_blocking","","Set the maximum number of concurrent blocking sections.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"keep_alive","","Set the worker thread keep alive duration",4,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"name":"self"}}],[11,"name_prefix","","Set name prefix of threads spawned by the scheduler",4,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"stack_size","","Set the stack size (in bytes) for worker threads.",4,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"around_worker","","Execute function `f` on each worker thread.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"after_start","","Execute function `f` after each thread is started but before it starts doing work.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"before_stop","","Execute function `f` before each thread stops.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"custom_park","","Customize the `park` instance used by each worker thread.",4,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"build","","Create the configured `ThreadPool`.",4,{"inputs":[{"name":"self"}],"output":{"name":"threadpool"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"spawn","","Spawn a future onto the thread pool",5,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"status","","",5,{"inputs":[{"name":"self"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"spawn","","",5,{"inputs":[{"name":"self"},{"generics":["future"],"name":"box"}],"output":{"generics":["spawnerror"],"name":"result"}}],[11,"execute","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["executeerror"],"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `ThreadPool` with default values.",7,{"inputs":[],"output":{"name":"threadpool"}}],[11,"spawn","","Spawn a future onto the thread pool.",7,{"inputs":[{"name":"self"},{"name":"f"}],"output":null}],[11,"sender","","Return a reference to the sender handle",7,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"sender_mut","","Return a mutable reference to the sender handle",7,{"inputs":[{"name":"self"}],"output":{"name":"sender"}}],[11,"shutdown_on_idle","","Shutdown the pool once it becomes idle.",7,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown","","Shutdown the pool",7,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"shutdown_now","","Shutdown the pool immediately",7,{"inputs":[{"name":"self"}],"output":{"name":"shutdown"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"id","","Returns a reference to the worker's identifier.",8,{"inputs":[{"name":"self"}],"output":{"name":"workerid"}}],[11,"run","","Run the worker",8,{"inputs":[{"name":"self"}],"output":null}],[11,"drop","","",8,{"inputs":[{"name":"self"}],"output":null}]],"paths":[[3,"DefaultPark"],[3,"DefaultUnpark"],[3,"ParkError"],[3,"BlockingError"],[3,"Builder"],[3,"Sender"],[3,"Shutdown"],[3,"ThreadPool"],[3,"Worker"]]};
searchIndex["tokio_timer"] = {"doc":"Utilities for scheduling work to happen after a period of time.","items":[[3,"Deadline","tokio_timer","Allows a given `Future` to execute until the specified deadline.",null,null],[3,"DeadlineError","","Error returned by `Deadline` future.",null,null],[3,"Delay","","A future that completes at a specified instant in time.",null,null],[3,"Error","","Errors encountered by the timer implementation.",null,null],[3,"Interval","","A stream representing notifications at fixed interval",null,null],[5,"with_default","","Set the default timer for the duration of the closure.",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[5,"sleep","","Create a Future that completes in `duration` from now.",null,{"inputs":[{"name":"duration"}],"output":{"name":"delay"}}],[0,"clock","","A configurable source of time.",null,null],[3,"Clock","tokio_timer::clock","A handle to a source of time.",null,null],[5,"now","","Returns an `Instant` corresponding to \"now\".",null,{"inputs":[],"output":{"name":"instant"}}],[5,"with_default","","Set the default clock for the duration of the closure.",null,{"inputs":[{"name":"clock"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"clock"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"clock"}}],[11,"new","","Return a new `Clock` instance that uses the current execution context's source of time.",0,{"inputs":[],"output":{"name":"clock"}}],[11,"new_with_now","","Return a new `Clock` instance that uses `now` as the source of time.",0,{"inputs":[{"name":"t"}],"output":{"name":"clock"}}],[11,"system","","Return a new `Clock` instance that uses `Instant::now()` as the source of time.",0,{"inputs":[],"output":{"name":"clock"}}],[11,"now","","Returns an instant corresponding to \"now\" by using the instance's source of time.",0,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Now","","Returns `Instant` values representing the current instant in time.",null,null],[10,"now","","Returns an instant corresponding to \"now\".",1,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[0,"timer","tokio_timer","Timer implementation.",null,null],[3,"Handle","tokio_timer::timer","Handle to timer instance.",null,null],[3,"SystemNow","","A handle to a source of time.",null,null],[3,"Timer","","Timer implementation that drives [`Delay`], [`Interval`], and [`Deadline`].",null,null],[3,"Turn","","Return value from the `turn` method on `Timer`.",null,null],[5,"with_default","","Set the default timer for the duration of the closure.",null,{"inputs":[{"name":"handle"},{"name":"enter"},{"name":"f"}],"output":{"name":"r"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"current","","Returns a handle to the current timer.",2,{"inputs":[],"output":{"name":"handle"}}],[11,"delay","","Create a `Delay` driven by this handle's associated `Timer`.",2,{"inputs":[{"name":"self"},{"name":"instant"}],"output":{"name":"delay"}}],[11,"deadline","","Create a `Deadline` driven by this handle's associated `Timer`.",2,{"inputs":[{"name":"self"},{"name":"t"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"interval","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",2,{"inputs":[{"name":"self"},{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Timer` instance that uses `park` to block the current thread.",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_park","","Returns a reference to the underlying `Park` instance.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_park_mut","","Returns a mutable reference to the underlying `Park` instance.",3,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"new_with_now","","Create a new `Timer` instance that uses `park` to block the current thread and `now` to get the current `Instant`.",3,{"inputs":[{"name":"t"},{"name":"n"}],"output":{"name":"self"}}],[11,"handle","","Returns a handle to the timer.",3,{"inputs":[{"name":"self"}],"output":{"name":"handle"}}],[11,"turn","","Performs one iteration of the timer loop.",3,{"inputs":[{"name":"self"},{"generics":["duration"],"name":"option"}],"output":{"generics":["turn"],"name":"result"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"unpark","","",3,null],[11,"park","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"park_timeout","","",3,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"result"}}],[11,"drop","","",3,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","tokio_timer","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Deadline` that completes when `future` completes or when `deadline` is reached.",5,{"inputs":[{"name":"t"},{"name":"instant"}],"output":{"name":"deadline"}}],[11,"get_ref","","Gets a reference to the underlying future in this deadline.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Gets a mutable reference to the underlying future in this deadline.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes this deadline, returning the underlying future.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"inner","","Create a new `DeadlineError` representing the inner future completing with `Err`.",6,{"inputs":[{"name":"t"}],"output":{"name":"deadlineerror"}}],[11,"is_inner","","Returns `true` if the error was caused by the inner future completing with `Err`.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes `self`, returning the inner future error.",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"elapsed","","Create a new `DeadlineError` representing the inner future not completing before the deadline is reached.",6,{"inputs":[],"output":{"name":"deadlineerror"}}],[11,"is_elapsed","","Returns `true` if the error was caused by the inner future not completing before the deadline is reached.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"timer","","Creates a new `DeadlineError` representing an error encountered by the timer implementation",6,{"inputs":[{"name":"error"}],"output":{"name":"deadlineerror"}}],[11,"is_timer","","Returns `true` if the error was caused by the timer.",6,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"into_timer","","Consumes `self`, returning the error raised by the timer implementation.",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"option"}}],[11,"description","","",6,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Delay` instance that elapses at `deadline`.",7,{"inputs":[{"name":"instant"}],"output":{"name":"delay"}}],[11,"deadline","","Returns the instant at which the future will complete.",7,{"inputs":[{"name":"self"}],"output":{"name":"instant"}}],[11,"is_elapsed","","Returns true if the `Delay` has elapsed",7,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"reset","","Reset the `Delay` instance to a new deadline.",7,{"inputs":[{"name":"self"},{"name":"instant"}],"output":null}],[11,"poll","","",7,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"shutdown","","Create an error representing a shutdown timer.",8,{"inputs":[],"output":{"name":"error"}}],[11,"is_shutdown","","Returns `true` if the error was caused by the timer being shutdown.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"at_capacity","","Create an error representing a timer at capacity.",8,{"inputs":[],"output":{"name":"error"}}],[11,"is_at_capacity","","Returns `true` if the error was caused by the timer being at capacity.",8,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"description","","",8,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Interval` that starts at `at` and yields every `duration` interval after that.",9,{"inputs":[{"name":"instant"},{"name":"duration"}],"output":{"name":"interval"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}]],"paths":[[3,"Clock"],[8,"Now"],[3,"Handle"],[3,"Timer"],[3,"Turn"],[3,"Deadline"],[3,"DeadlineError"],[3,"Delay"],[3,"Error"],[3,"Interval"]]};
searchIndex["tokio_udp"] = {"doc":"UDP bindings for `tokio`.","items":[[3,"UdpFramed","tokio_udp","A unified `Stream` and `Sink` interface to an underlying `UdpSocket`, using the `Encoder` and `Decoder` traits to encode and decode frames.",null,null],[3,"UdpSocket","","An I/O object representing a UDP socket.",null,null],[3,"SendDgram","","A future used to write the entire contents of some data to a UDP socket.",null,null],[3,"RecvDgram","","A future used to receive a datagram from a UDP socket.",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"start_send","","",0,null],[11,"poll_complete","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"close","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"new","","Create a new `UdpFramed` backed by the given socket and codec.",0,{"inputs":[{"name":"udpsocket"},{"name":"c"}],"output":{"name":"udpframed"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",0,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",0,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",0,{"inputs":[{"name":"self"}],"output":{"name":"udpsocket"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","This function will create a new UDP socket and attempt to bind it to the `addr` provided.",1,{"inputs":[{"name":"socketaddr"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"from_std","","Creates a new `UdpSocket` from the previously bound socket provided.",1,{"inputs":[{"name":"udpsocket"},{"name":"handle"}],"output":{"generics":["udpsocket"],"name":"result"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"connect","","Connects the UDP socket setting the default destination for send() and limiting packets that are read via recv from the address specified in `addr`.",1,{"inputs":[{"name":"self"},{"name":"socketaddr"}],"output":{"name":"result"}}],[11,"poll_send","","Sends data on the socket to the remote address to which it is connected.",1,null],[11,"poll_recv","","Receives a single datagram message on the socket from the remote address to which it is connected. On success, returns the number of bytes read.",1,null],[11,"poll_send_to","","Sends data on the socket to the given address. On success, returns the number of bytes written.",1,null],[11,"send_dgram","","Creates a future that will write the entire contents of the buffer `buf` provided as a datagram to this socket.",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"socketaddr"}],"output":{"name":"senddgram"}}],[11,"poll_recv_from","","Receives data from the socket. On success, returns the number of bytes read and the address from whence the data came.",1,null],[11,"recv_dgram","","Creates a future that receive a datagram to be written to the buffer provided.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["bool"],"name":"result"}}],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",1,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"result"}}],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",1,{"inputs":[{"name":"self"}],"output":{"generics":["u32"],"name":"result"}}],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",1,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv4addr"},{"name":"ipv4addr"}],"output":{"name":"result"}}],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",1,{"inputs":[{"name":"self"},{"name":"ipv6addr"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}]],"paths":[[3,"UdpFramed"],[3,"UdpSocket"],[3,"SendDgram"],[3,"RecvDgram"]]};
searchIndex["tokio_uds"] = {"doc":"Unix Domain Sockets for Tokio.","items":[[3,"UnixDatagram","tokio_uds","An I/O object representing a Unix datagram socket.",null,null],[3,"Incoming","","Stream of listeners",null,null],[3,"UnixListener","","A Unix socket which can accept connections from other unix sockets.",null,null],[3,"RecvDgram","","A future for receiving datagrams from a Unix datagram socket.",null,null],[3,"SendDgram","","A future for writing a buffer to a Unix datagram socket.",null,null],[3,"UnixStream","","A structure representing a connected unix socket.",null,null],[3,"UCred","","Credentials of a process",null,null],[12,"uid","","UID (user ID) of the process",0,null],[12,"gid","","GID (group ID) of the process",0,null],[11,"bind","","Creates a new `UnixDatagram` bound to the specified path.",1,{"inputs":[{"name":"p"}],"output":{"generics":["unixdatagram"],"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",1,{"inputs":[],"output":{"name":"result"}}],[11,"from_std","","Consumes a `UnixDatagram` in the standard library and returns a nonblocking `UnixDatagram` from this crate.",1,{"inputs":[{"name":"unixdatagram"},{"name":"handle"}],"output":{"generics":["unixdatagram"],"name":"result"}}],[11,"unbound","","Creates a new `UnixDatagram` which is not bound to any address.",1,{"inputs":[],"output":{"generics":["unixdatagram"],"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",1,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",1,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",1,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the address of this socket's peer.",1,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"poll_recv_from","","Receives data from the socket.",1,null],[11,"poll_recv","","Receives data from the socket.",1,null],[11,"recv_dgram","","Returns a future for receiving a datagram. See the documentation on RecvDgram for details.",1,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"poll_send_to","","Sends data on the socket to the specified address.",1,null],[11,"poll_send","","Sends data on the socket to the socket's peer.",1,null],[11,"send_dgram","","Returns a future sending the data in buf to the socket at path.",1,{"inputs":[{"name":"self"},{"name":"t"},{"name":"p"}],"output":{"name":"senddgram"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",1,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",1,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",1,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"bind","","Creates a new `UnixListener` bound to the specified path.",3,{"inputs":[{"name":"p"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"from_std","","Consumes a `UnixListener` in the standard library and returns a nonblocking `UnixListener` from this crate.",3,{"inputs":[{"name":"unixlistener"},{"name":"handle"}],"output":{"generics":["unixlistener"],"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",3,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",3,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",3,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"poll_accept","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"poll_accept_std","","Attempt to accept a connection and create a new connected `UnixStream` if successful.",3,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",3,{"inputs":[{"name":"self"}],"output":{"name":"incoming"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"connect","","Connects to the socket named by `path`.",6,{"inputs":[{"name":"p"}],"output":{"name":"connectfuture"}}],[11,"from_std","","Consumes a `UnixStream` in the standard library and returns a nonblocking `UnixStream` from this crate.",6,{"inputs":[{"name":"unixstream"},{"name":"handle"}],"output":{"generics":["unixstream"],"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",6,{"inputs":[],"output":{"name":"result"}}],[11,"poll_read_ready","","Test whether this socket is ready to be read or not.",6,{"inputs":[{"name":"self"},{"name":"ready"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"poll_write_ready","","Test whether this socket is ready to be written to or not.",6,{"inputs":[{"name":"self"}],"output":{"generics":["ready","error"],"name":"poll"}}],[11,"local_addr","","Returns the socket address of the local half of this connection.",6,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",6,{"inputs":[{"name":"self"}],"output":{"generics":["socketaddr"],"name":"result"}}],[11,"peer_cred","","Returns effective credentials of the process which called `connect` or `socketpair`.",6,{"inputs":[{"name":"self"}],"output":{"generics":["ucred"],"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",6,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",6,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"read","","",6,null],[11,"write","","",6,null],[11,"flush","","",6,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"prepare_uninitialized_buffer","","",6,null],[11,"read_buf","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"shutdown","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"write_buf","","",6,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"generics":["usize","error"],"name":"poll"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",6,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"ucred"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"ucred"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"UCred"],[3,"UnixDatagram"],[3,"Incoming"],[3,"UnixListener"],[3,"RecvDgram"],[3,"SendDgram"],[3,"UnixStream"]]};
initSearch(searchIndex);
